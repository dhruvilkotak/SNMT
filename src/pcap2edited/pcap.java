package pcap2edited;


import java.awt.Graphics;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.util.Log;
import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kevin
 */
public class pcap extends  JInternalFrame implements Printable  {

    /**
     * Creates new form pcap
     */ PcapDumperExample p;
                 StringBuilder errbuf;
List<String> pkt=new ArrayList<String>();

      List<String> dev=new ArrayList<String>();
    public pcap() {
        initComponents();
        getList.setEnabled(false);
         getpkt.setEnabled(false);
         getpkt.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        getpkt = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        selectDevice = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        displayDevice = new javax.swing.JButton();
        save = new javax.swing.JButton();
        open = new javax.swing.JButton();
        getList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        getpkt.setText("Get Packet Details");
        getpkt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getpktActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        selectDevice.setText("select Device");
        selectDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDeviceActionPerformed(evt);
            }
        });

        jLabel1.setText("Available devices :");

        displayDevice.setText("Display Device");
        displayDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayDeviceActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        open.setText("Open File");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        getList.setText("GetPacketList");
        getList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 680, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(displayDevice)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(open)
                                        .addComponent(selectDevice)))
                                .addGap(0, 118, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabel2)
                .addContainerGap(103, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(getList)
                .addGap(89, 89, 89)
                .addComponent(getpkt)
                .addGap(100, 100, 100)
                .addComponent(save)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(displayDevice)
                                .addGap(18, 18, 18)
                                .addComponent(selectDevice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(open)
                                .addGap(31, 31, 31)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getpkt)
                    .addComponent(save)
                    .addComponent(getList))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getpktActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getpktActionPerformed
        // TODO add your handling code here:
     Tester t =new Tester();
      String a=t.getPkt(jList1.getSelectedIndex(),filename);
    }//GEN-LAST:event_getpktActionPerformed
 int selecteddevice;
    private void selectDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDeviceActionPerformed
    filename=null;
     selecteddevice=jList2.getSelectedIndex();
     //System.out.println("i:"+ch);
     if(p.check(selecteddevice)>0)
     {
         jLabel2.setText("Device opened..");
         getList.setEnabled(true);
         getpkt.setEnabled(true);
         getpkt.setEnabled(true);
     }
     else
     {
         jLabel2.setText("Device can't open..");
           getList.setEnabled(false);
         getpkt.setEnabled(false);
         getpkt.setEnabled(false);
       
     }
        // TODO add your handling code here:
    }//GEN-LAST:event_selectDeviceActionPerformed
public void demo(int ch)
{
      List<PcapIf> alldevs = new ArrayList<PcapIf>();
       PcapIf device = alldevs.get(ch);

            int snaplen = 64 * 1024;           // Capture all packets, no trucation
            int flags = Pcap.MODE_PROMISCUOUS; // capture all packets
            int timeout = 10 * 1000;           // 10 seconds in millis

            //Open the selected device to capture packets
            Pcap pcap = Pcap.openLive(device.getName(), snaplen, flags, timeout, errbuf);

            if (pcap == null) {
                System.err.printf("Error while opening device for capture: "
                        + errbuf.toString());
                return;
            }
         
}
    private void displayDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayDeviceActionPerformed
     p=new PcapDumperExample();
        /////
         DefaultListModel dl=new DefaultListModel();
       dev=p.getDevice();
       
      //   pkt=p.packet();
        for(int i=0;i<dev.size();i++)
        {
            System.out.println(dev.get(i));
             dl.addElement(dev.get(i));
                       
        }
        jList2.setLayoutOrientation(JList.VERTICAL_WRAP);
                        jList2.setVisibleRowCount(dev.size()-1);
                       jList2.setModel(dl);
        
// TODO add your handling code here:
    }//GEN-LAST:event_displayDeviceActionPerformed
    String filename=null;
    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        JFileChooser fi=new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("CAP file", new String[] {"cap", "pcap"});
        fi.setFileFilter(filter);
        fi.addChoosableFileFilter(filter);
        fi.showOpenDialog(null);
        File f=fi.getSelectedFile();
        filename=f.getAbsolutePath();
        jLabel2.setText(filename+" is opened.");
         getList.setEnabled(true);
         getpkt.setEnabled(true);
         getpkt.setEnabled(true);
     // TODO add your handling code here:
    }//GEN-LAST:event_openActionPerformed
public static void copyFile(String oldLocation, String newLocation)  {
        InputStream inStream = null;
	OutputStream outStream = null;
 
    	try{
 
    	    File afile =new File(oldLocation);
    	    File bfile =new File(newLocation);
 
    	    inStream = new FileInputStream(afile);
    	    outStream = new FileOutputStream(bfile);
 
    	    byte[] buffer = new byte[1024];
 
    	    int length;
    	    //copy the file content in bytes 
    	    while ((length = inStream.read(buffer)) > 0){
 
    	    	outStream.write(buffer, 0, length);
 
    	    }
 
    	    inStream.close();
    	    outStream.close();
 
    	    System.out.println("File is copied successful!");
 
    	}catch(IOException e){
    		e.printStackTrace();
    	}
    }  
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser fi = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("CAP file", new String[] {"cap", "pcap"});
        fi.setFileFilter(filter);
        fi.addChoosableFileFilter(filter);
         File file;
        if(filename==null)
        {
           file=new File("tmp-capture-file.cap");   
        }
        else
        {
            file=new File(filename);
        }
        fi.setDialogTitle("Specify a file to save");   
        int userSelection = fi.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) 
        {
            File fileToSave = fi.getSelectedFile();
            if (file.exists() && filename==null)
            {  
                copyFile("tmp-capture-file.cap",fileToSave.getAbsolutePath());
                System.out.println("file deleted");
                  file.delete(); // Cleanup  
             }
            else
            {
                  copyFile(filename,fileToSave.getAbsolutePath());
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_saveActionPerformed

    private void getListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getListActionPerformed
         p=new PcapDumperExample();
         pkt=p.packet(filename);
       DefaultListModel dl=new DefaultListModel();
        for(int i=0;i<pkt.size();i++)
        {
              dl.addElement(pkt.get(i));
                       
        }
        jList1.setLayoutOrientation(JList.VERTICAL_WRAP);
        jList1.setVisibleRowCount(pkt.size());
        jList1.setModel(dl);
    }//GEN-LAST:event_getListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pcap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pcap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pcap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pcap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pcap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton displayDevice;
    private javax.swing.JButton getList;
    private javax.swing.JButton getpkt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton open;
    private javax.swing.JButton save;
    private javax.swing.JButton selectDevice;
    // End of variables declaration//GEN-END:variables

    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
